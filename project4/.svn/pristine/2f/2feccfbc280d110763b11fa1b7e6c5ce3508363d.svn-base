import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.sql.Timestamp;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletHandler;
import org.eclipse.jetty.servlet.ServletHolder;

//TODO
//Links are clickable...when they come up..everytime you type in a
// queryword, just show the
// results for that word, better name for search

/**
 * 
 * @see WebCrawler
 * @see HTMLCleanerTest
 */
public class WebCrawlPartialSearch {
	private final static Logger logger = LogManager.getLogger();
	private MultiReaderLock queryLock = new MultiReaderLock();
	private static LinkedHashMap<String, ArrayList<SearchResult>> querysearchMap;
	private static MultiThreadedInvertedIndex mi = new MultiThreadedInvertedIndex();
	private static HashMap<String, Timestamp> cookielist = new HashMap<String, Timestamp>();
	private static String temp = "";
	private String queryword = "";
	private String answer = "";
	static Timestamp currentTimestamp;
	static long elapsedTime;
	static int amountofresults = 0;

	/**
	 * Constructor
	 */
	public WebCrawlPartialSearch(MultiThreadedInvertedIndex multiindex) {
		this.mi = multiindex;
		// this.linkmap = new LinkedHashMap();
		this.querysearchMap = new LinkedHashMap<String, ArrayList<SearchResult>>();

	}

	/**
	 * Read through the querywords file line by line and put the words into a
	 * LinkedHashMap data structure if the queryword is not already stored as a
	 * key value within it.
	 * 
	 * @param invertedIndex
	 * @param string
	 * @throws IOException
	 */
	public void multiinvertedindexsetter(MultiThreadedInvertedIndex multiindex) {
		this.mi = multiindex;
		System.out.println("MI");
	}

	public void protinit(int PORT) {
		Server server = new Server(PORT);
		// Setup the handler component

		ServletHandler handler = new ServletHandler();
		handler.addServletWithMapping(new ServletHolder(new HeaderServlet()),
				"/check");
		handler.addServletWithMapping(new ServletHolder(
				new CookieIndexServlet()), "/cookies");
		handler.addServletWithMapping(new ServletHolder(
				new CookieConfigServlet()), "/config");
		server.setHandler(handler);

		// Start the server (it is a thread) and wait for it to complete
		try {
			server.start();
		} catch (Exception e) {
			System.out.println("The server had problems starting.");
		}
		try {
			server.join();
		} catch (InterruptedException e) {
			System.out.println("The server had problems joining.");
		}
	}

	public static String multiBuildIndex(String querywordline)
			throws IOException {
		logger.debug("1beforeInvertedIndex", mi);
		System.out.println("MULTBUILD HIT " + querywordline);
		ArrayList<SearchResult> qw;
		List<String> myname;
		myname = WordParser.parseText(querywordline);
		System.out.println("MYNAME  " + myname.get(0));
		qw = mi.searchlister(myname);
		querysearchMap.put(querywordline, qw);
		temp = querywordline;
		System.out.println("AFTER HIT  " + querysearchMap.get(querywordline));
		logger.debug("1afterInvertedIndex", mi);
		querywordline = HTMLprinter(querysearchMap);
		return querywordline;
	}

	public String multiintializer(String querywordline) throws IOException {
		querysearchMap.put(querywordline, null);
		return querywordline;
	}

	public LinkedHashMap getresults() {
		System.out.println(querysearchMap.get(0));
		return this.querysearchMap;
	}

	public static String History() {
		StringBuffer sb = new StringBuffer();
		for (String word : cookielist.keySet()) {
			sb.append(word + "    " + cookielist.get(word));
			sb.append("\n");
		}
		return sb.toString();

	}

	/**
	 * Get the filename from argmap following the -r tag and output the contents
	 * of the LinkedHashMap structure.
	 * 
	 * @param filename
	 * @return
	 */
	public String searchoutput(String filename) {
		Path newFile = Paths.get(filename);
		try (BufferedWriter writer = Files.newBufferedWriter(newFile,
				Charset.forName("UTF-8"))) {
			for (String word : querysearchMap.keySet()) {
				System.out.println("Word  " + word);
				writer.append(word);
				writer.newLine();
				for (SearchResult qq : querysearchMap.get(word)) {
					String str = qq.toString();
					writer.append(str);
					writer.newLine();
				}
				writer.newLine();

			}
			writer.flush();
			return filename;

		} catch (IOException e) {
			System.out.println("Bad file   " + filename);
		}
		return filename;
	}

	public static class HeaderServlet extends HttpServlet {
		/**
		 * Displays a form where users can enter a URL to check. When the button
		 * is pressed, submits the URL back to /check as a GET request.
		 * 
		 * If a URL was included as a parameter in the GET request, fetch and
		 * display the HTTP headers of that URL.
		 */
		protected void doGet(HttpServletRequest request,
				HttpServletResponse response) throws ServletException,
				IOException {
			response.setContentType("text/html");
			response.setStatus(HttpServletResponse.SC_OK);
			System.out.println("YOLO");

			PrintWriter out = response.getWriter();
			out.printf("<html>%n");
			out.printf("<head><title>%s</title></head>%n",
					"Welcome to the Matrix");
			// out.printf("<body>%n");
			// out.println("<body style=\"background-image:url(C:\\Users\\Adam\\cs212workspace\\project5\\green.jpg)\">");
			out.println("<body style='background-color:#0C090A'>");
			out.println("<div style='position: absolute; z-index:"
					+ " -99; width: 100%; height: 100%'>");
			out.println("<iframe title= \"Youtube Video Player\" width=\"100%\" "
					+ "height=\"100%\" src=\"//www.youtube.com/embed/kqUR3KtWbTk?autoplay=1"
					+ "&loop=1\""
					+" allowfullscreen></iframe>");
			out.println("</div>");
			printForm(request, response);
			if (request.getParameter("queryword") != null) {
				String queryword = request.getParameter("queryword");
				System.out.println(queryword);
//				if (queryword.equals("Let me take a Sophie")) {
//					out.println("<iframe title= \"Youtube Video Player\" width=\"560\" "
//							+ "height=\"315\" src=\"//www.youtube.com/embed/kdemFfbS5H0\""
//							+ " frameborder=\"0\" allowfullscreen></iframe>");
//				}
				if (queryword.equals("HungryHamster")) {
					System.out.println("IT HIT HERE");
					out.println("<iframe title= \"Youtube Video Player\" width=\"560\" "
							+ "height=\"315\" src=\"//www.youtube.com/embed/JOCtdw9FG-s\""
							+ " frameborder=\"0\" allowfullscreen></iframe>");
				}
				
				

				
				
				long startTime = System.currentTimeMillis();
				out.printf("<pre><font color='white'><font size='6'><a href="
				+ multiBuildIndex(queryword) + "</a></font></font></pre>");
				
				currentTimestamp = new java.sql.Timestamp(Calendar
						.getInstance().getTime().getTime());
				cookielist.put(temp, currentTimestamp);
				long elapsedTime = System.currentTimeMillis() - startTime;
				long elapsedSeconds = elapsedTime / 1000;
				long secondsDisplay = elapsedSeconds % 60;
				long elapsedMinutes = elapsedSeconds / 60;
				out.printf("<pre><font color='green'><font size='10'>Elapsed Time:  " + elapsedTime + "</font></font></pre>");
				out.printf("<pre><font color='green'><font size='10'>Amount of results:  "  + amountofresults + "</font></font></pre>");
				if (request.getParameter("answer") != null) {
					String answer = request.getParameter("answer");
					if (answer.equals("No") || answer.equals("no")) {
						cookielist.clear();
					}
				}
			}

			out.printf("</body>%n");
			out.printf("</html>%n");

			response.setStatus(HttpServletResponse.SC_OK);

		}
	}

	public static String HTMLprinter(
			LinkedHashMap<String, ArrayList<SearchResult>> map) {
		//amount of results in the map
		amountofresults = map.size();
		//my timer
		//currentTimestamp
		System.out.println("MAP   " + map);
		
		StringBuilder headers = new StringBuilder();
		for (String key : map.keySet()) {
			headers.append(key);
			System.out.println(map.get(key));
			headers.append("\n");
			
			for (SearchResult searchResult: map.get(key)) {
				headers.append(searchResult.toString());
				headers.append("\n");
			}
			headers.append("\n");
		}
		
		
		System.out.println("Number of results  " + amountofresults);
		System.out.println("The time it took:  " + elapsedTime);
		System.out.println("RESULTS   " + headers);
		return headers.toString();
	}

	private static void printForm(HttpServletRequest request,
			HttpServletResponse response) throws IOException {

		PrintWriter out = response.getWriter();
		out.printf("<form method=\"get\", action=\"%s\">%n",
				request.getServletPath());
		out.printf("<h2><center>&nbsp;</center></h2>%n");
		out.printf("<h2><center>&nbsp;</center></h2>%n");
		out.printf("<h2><center>&nbsp;</center></h2>%n");
		out.printf("<h2><center>&nbsp;</center></h2>%n");
		out.printf("<h2><center>&nbsp;</center></h2>%n");
		out.printf("<h2><center>&nbsp;</center></h2>%n");
		out.printf("<h2><center>&nbsp;</center></h2>%n");
		out.printf("<h2><font color='green'><center><font style ='font-size:100px'; font face='verdana'>Enter the Matrix!</font></center></font>"
				+ "</h2>%n%n");
		out.printf("<h2><center><input type=\"text\" name=\"queryword\" maxlength=\"100\" size=\"100\"></center>"
				+ "</h2>%n");
		out.printf("<p><center><input style='color:green; width:300px' name=\"queryword\" value=\"Stay away NSA! Say yes or no.\">"
				+ "<input type=\"text\" name=\"answer\" maxlength=\"10\" size=\"10\">"
				+ "<input style='color:green' type=\"submit\" value=\"Get the Queryword!\"</center>>"
				+ "</p>\n%n");
		out.printf("</form>\n%n");
	}

	public static void cookieadder(String cookie) {
		Timestamp currentTimestamp = new java.sql.Timestamp(Calendar
				.getInstance().getTime().getTime());
		cookielist.put(cookie, currentTimestamp);
	}

	public static class CookieIndexServlet extends CookieBaseServlet {

		@Override
		protected void doGet(HttpServletRequest request,
				HttpServletResponse response) throws ServletException,
				IOException {

			log.info("GET " + request.getRequestURL().toString());

			prepareResponse("Cookies!", response);
			PrintWriter out = response.getWriter();
			out.printf("<p>");

			if (request.getRequestURI().endsWith("favicon.ico")) {
				response.sendError(HttpServletResponse.SC_NOT_FOUND);
				return;
			}
			System.out.println("Temp   " + temp);
			Map<String, String> cookies = getCookieMap(request);
			out.println("<body style='background-color:#0C090A'>");
			out.printf("<p style='color:green'>");
			out.printf(History());
			for (String word : cookielist.keySet()) {
				out.printf("<pre><font color='green'><font size='10'>" + word + "    " + cookielist.get(word) +  "</font></font></pre>");
				out.append("\n");
			}
			out.printf("</p>");

			// PrintWriter out = response.getWriter();
			// out.printf("<p>");

			// out.printf("You have never been to this webpage before! ");
			// out.printf("Thank you for visiting.");

			finishResponse(request, response);

		}
	}

	public static class CookieConfigServlet extends CookieBaseServlet {
		@Override
		protected void doGet(HttpServletRequest request,
				HttpServletResponse response) throws ServletException,
				IOException {

			log.info("GET " + request.getRequestURL().toString());

			prepareResponse("Configure", response);

			PrintWriter out = response.getWriter();
			out.println("<body style='background-color:#0C090A'>");
			out.printf("<p style='color:green'>To clear saved cookies, please press \"Clear\".</p>%n");
			out.printf("%n");

			out.printf("<form method=\"post\" action=\"%s\">%n",
					request.getRequestURI());
			out.printf("\t<input type=\"submit\" value=\"Clear\">%n");
			out.printf("</form>%n");
			cookielist.clear();

			finishResponse(request, response);
		}

	
	}
}
